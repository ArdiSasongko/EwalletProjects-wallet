// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: wallet_transactions.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getHistoryTransactions = `-- name: GetHistoryTransactions :many
SELECT wallet_id, reference, amount, wallet_transactions_type, created_at
FROM wallet_transactions
WHERE wallet_id = $1 AND wallet_transactions_type = $2
ORDER BY created_at DESC
LIMIT $3
OFFSET $4
`

type GetHistoryTransactionsParams struct {
	WalletID               int32
	WalletTransactionsType WalletTransactionsType
	Limit                  int32
	Offset                 int32
}

type GetHistoryTransactionsRow struct {
	WalletID               int32
	Reference              string
	Amount                 pgtype.Numeric
	WalletTransactionsType WalletTransactionsType
	CreatedAt              pgtype.Timestamp
}

func (q *Queries) GetHistoryTransactions(ctx context.Context, arg GetHistoryTransactionsParams) ([]GetHistoryTransactionsRow, error) {
	rows, err := q.db.Query(ctx, getHistoryTransactions,
		arg.WalletID,
		arg.WalletTransactionsType,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetHistoryTransactionsRow
	for rows.Next() {
		var i GetHistoryTransactionsRow
		if err := rows.Scan(
			&i.WalletID,
			&i.Reference,
			&i.Amount,
			&i.WalletTransactionsType,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertWalletTransactionsCredit = `-- name: InsertWalletTransactionsCredit :one
INSERT INTO wallet_transactions (wallet_id, amount, wallet_transactions_type, reference)
VALUES ($1, $2, 'credit', $3)
RETURNING wallet_id, reference, amount, created_at
`

type InsertWalletTransactionsCreditParams struct {
	WalletID  int32
	Amount    pgtype.Numeric
	Reference string
}

type InsertWalletTransactionsCreditRow struct {
	WalletID  int32
	Reference string
	Amount    pgtype.Numeric
	CreatedAt pgtype.Timestamp
}

func (q *Queries) InsertWalletTransactionsCredit(ctx context.Context, arg InsertWalletTransactionsCreditParams) (InsertWalletTransactionsCreditRow, error) {
	row := q.db.QueryRow(ctx, insertWalletTransactionsCredit, arg.WalletID, arg.Amount, arg.Reference)
	var i InsertWalletTransactionsCreditRow
	err := row.Scan(
		&i.WalletID,
		&i.Reference,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const insertWalletTransactionsDebit = `-- name: InsertWalletTransactionsDebit :one
INSERT INTO wallet_transactions (wallet_id, amount, wallet_transactions_type, reference)
VALUES ($1, $2, 'debit', $3)
RETURNING wallet_id, reference, amount, created_at
`

type InsertWalletTransactionsDebitParams struct {
	WalletID  int32
	Amount    pgtype.Numeric
	Reference string
}

type InsertWalletTransactionsDebitRow struct {
	WalletID  int32
	Reference string
	Amount    pgtype.Numeric
	CreatedAt pgtype.Timestamp
}

func (q *Queries) InsertWalletTransactionsDebit(ctx context.Context, arg InsertWalletTransactionsDebitParams) (InsertWalletTransactionsDebitRow, error) {
	row := q.db.QueryRow(ctx, insertWalletTransactionsDebit, arg.WalletID, arg.Amount, arg.Reference)
	var i InsertWalletTransactionsDebitRow
	err := row.Scan(
		&i.WalletID,
		&i.Reference,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}
