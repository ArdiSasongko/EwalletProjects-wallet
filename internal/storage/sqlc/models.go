// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package sqlc

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type WalletTransactionsType string

const (
	WalletTransactionsTypeCredit WalletTransactionsType = "credit"
	WalletTransactionsTypeDebit  WalletTransactionsType = "debit"
)

func (e *WalletTransactionsType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = WalletTransactionsType(s)
	case string:
		*e = WalletTransactionsType(s)
	default:
		return fmt.Errorf("unsupported scan type for WalletTransactionsType: %T", src)
	}
	return nil
}

type NullWalletTransactionsType struct {
	WalletTransactionsType WalletTransactionsType
	Valid                  bool // Valid is true if WalletTransactionsType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullWalletTransactionsType) Scan(value interface{}) error {
	if value == nil {
		ns.WalletTransactionsType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.WalletTransactionsType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullWalletTransactionsType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.WalletTransactionsType), nil
}

type Wallet struct {
	UserID    int32
	Balance   pgtype.Numeric
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
}

type WalletTransaction struct {
	ID                     int32
	WalletID               int32
	Amount                 pgtype.Numeric
	WalletTransactionsType WalletTransactionsType
	Reference              string
	CreatedAt              pgtype.Timestamp
	UpdatedAt              pgtype.Timestamp
}
